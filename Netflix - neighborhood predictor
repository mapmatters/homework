{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Netflix Algorithm - A60039 Park Yongjae",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyPGBhwH942Occpcm4fW7K3m",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mapmatters/my-exercise/blob/master/Netflix%20-%20neighborhood%20predictor\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "90CLQW3nmt5k"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import networkx as nx\n",
        "import numpy as np\n",
        "import math as math"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DE-kRnYTnYCh"
      },
      "source": [
        "## HW 1: A, c 구하고 b_u, b_i 구하기"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WZv1NFP-m309"
      },
      "source": [
        "# R matrix 생성\n",
        "r = np.array(\n",
        "    [(5,4,4,np.nan,5),\n",
        "     (np.nan,3,5,3,4),\n",
        "     (5,2,np.nan,2,3),\n",
        "     (np.nan,2,3,1,2),\n",
        "     (4,np.nan,5,4,5),\n",
        "     (5,3,np.nan,3,5),\n",
        "     (3,2,3,2,np.nan),\n",
        "     (5,3,4,np.nan,5),\n",
        "     (4,2,5,4,np.nan),\n",
        "     (5,np.nan,5,3,4)]\n",
        ")\n"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Go-CFiE9o923",
        "outputId": "8fcbff5e-fbb5-404f-97e1-dc7a1feff69b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        }
      },
      "source": [
        "# train set 행렬 만들기\n",
        "r_train = r.copy()\n",
        "\n",
        "nan_set = [(0,3),(1,0),(2,2),(3,0),(4,1),\n",
        "               (5,2),(6,4),(7,3),(8,4),(9,1)]\n",
        "\n",
        "test_set = [(0,4),(1,3),(2,3),(3,1),(4,2),\n",
        "          (5,0),(6,1),(7,1),(8,0),(9,0)]\n",
        "for i in range(len(test_set)):\n",
        "  r_train[test_set[i]] = np.nan\n",
        "r_train"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 5.,  4.,  4., nan, nan],\n",
              "       [nan,  3.,  5., nan,  4.],\n",
              "       [ 5.,  2., nan, nan,  3.],\n",
              "       [nan, nan,  3.,  1.,  2.],\n",
              "       [ 4., nan, nan,  4.,  5.],\n",
              "       [nan,  3., nan,  3.,  5.],\n",
              "       [ 3., nan,  3.,  2., nan],\n",
              "       [ 5., nan,  4., nan,  5.],\n",
              "       [nan,  2.,  5.,  4., nan],\n",
              "       [nan, nan,  5.,  3.,  4.]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PfrccQkD1jxi",
        "outputId": "f9fd024b-6dbb-47ce-b28b-9dea181f8fb1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# 평점 평균 구하기\n",
        "r_mean = np.nanmean(r_train)\n",
        "# r_mean = 3.83\n",
        "r_mean "
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.6666666666666665"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3AmevWaIvvPB",
        "outputId": "e3bbe488-ce29-40cd-b892-ef08454fe4c0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 544
        }
      },
      "source": [
        "# A 행렬 만들기\n",
        "A = np.empty((0,15))\n",
        "\n",
        "for j in range(r_train.shape[1]):\n",
        "  for i in range(r_train.shape[0]):\n",
        "    if np.isnan(r_train[i,j]) == True:\n",
        "      continue\n",
        "    else:\n",
        "      arr_tmp = np.zeros((1,15))\n",
        "      arr_tmp[0][i] = 1\n",
        "      arr_tmp[0][10+j] = 1\n",
        "      A = np.vstack((A, arr_tmp))\n",
        "print(A.shape)\n",
        "A"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(30, 15)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n",
              "       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.],\n",
              "       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],\n",
              "       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],\n",
              "       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],\n",
              "       [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.],\n",
              "       [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.],\n",
              "       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],\n",
              "       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],\n",
              "       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],\n",
              "       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.],\n",
              "       [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.],\n",
              "       [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.],\n",
              "       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.],\n",
              "       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],\n",
              "       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],\n",
              "       [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.],\n",
              "       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.],\n",
              "       [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.],\n",
              "       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.],\n",
              "       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n",
              "       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n",
              "       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n",
              "       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n",
              "       [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n",
              "       [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.],\n",
              "       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R8HHf9fFxIDX",
        "outputId": "fd781d61-81e5-43b6-a7c2-909ce34ef49d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        }
      },
      "source": [
        "# c 구하기 (1)\n",
        "c_tmp = np.empty((1,0))\n",
        "for j in range(r.shape[1]):\n",
        "  for i in range(r.shape[0]):\n",
        "    if np.isnan(r_train[i,j]) == True:\n",
        "      continue\n",
        "    else:\n",
        "      c_tmp = np.append(c_tmp, r_train[i,j])\n",
        "print(c_tmp.shape)\n",
        "print(\"r: \\n {}\".format(c_tmp))\n",
        "c = c_tmp - r_mean\n",
        "print(\"r - r_mean: \\n {}\".format(c))"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(30,)\n",
            "r: \n",
            " [5. 5. 4. 3. 5. 4. 3. 2. 3. 2. 4. 5. 3. 3. 4. 5. 5. 1. 4. 3. 2. 4. 3. 4.\n",
            " 3. 2. 5. 5. 5. 4.]\n",
            "r - r_mean: \n",
            " [ 1.33333333  1.33333333  0.33333333 -0.66666667  1.33333333  0.33333333\n",
            " -0.66666667 -1.66666667 -0.66666667 -1.66666667  0.33333333  1.33333333\n",
            " -0.66666667 -0.66666667  0.33333333  1.33333333  1.33333333 -2.66666667\n",
            "  0.33333333 -0.66666667 -1.66666667  0.33333333 -0.66666667  0.33333333\n",
            " -0.66666667 -1.66666667  1.33333333  1.33333333  1.33333333  0.33333333]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JSJ5qJUZmXn8",
        "outputId": "28632884-1653-4be4-d99e-4b5ca3469d19",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "# b_u, b_i 구하기 --> numpy least square library 적용\n",
        "b = np.linalg.lstsq(A, c, rcond=None)[0]\n",
        "b_u = b[0:10]\n",
        "b_i = b[10:]\n",
        "\n",
        "print(\"Result for #HW1\")\n",
        "\n",
        "print(\"user bias(b_u): {}\".format(b_u))\n",
        "print(\"movie bias(b_i): {}\".format(b_i))"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Result for #HW1\n",
            "user bias(b_u): [ 0.62592593  0.42348485 -0.28148148 -1.77474747  0.5202862   0.49250842\n",
            " -1.23897306  0.45126263  0.39991582  0.22525253]\n",
            "movie bias(b_i): [ 0.71792929 -1.19873737  0.6030303  -0.6040404   0.32525253]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wqiEvrtjBKjY",
        "outputId": "e659358a-1abc-459b-995c-d669d2bf56f1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "source": [
        "# Rating Matrix\n",
        "r_hat = np.empty((10,5))\n",
        "\n",
        "for i in range(r.shape[0]):\n",
        "  for j in range(r.shape[1]):\n",
        "    r_hat[i,j] = r_mean + b_u[i] + b_i[j]\n",
        "print(\"Rating matrix (include whole value)\")\n",
        "r_hat"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Rating matrix (include whole value)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[5.01052189, 3.09385522, 4.8956229 , 3.68855219, 4.61784512],\n",
              "       [4.80808081, 2.89141414, 4.69318182, 3.48611111, 4.41540404],\n",
              "       [4.10311448, 2.18644781, 3.98821549, 2.78114478, 3.71043771],\n",
              "       [2.60984848, 0.69318182, 2.49494949, 1.28787879, 2.21717172],\n",
              "       [4.90488215, 2.98821549, 4.78998316, 3.58291246, 4.51220539],\n",
              "       [4.87710438, 2.96043771, 4.76220539, 3.55513468, 4.48442761],\n",
              "       [3.1456229 , 1.22895623, 3.03072391, 1.8236532 , 2.75294613],\n",
              "       [4.83585859, 2.91919192, 4.7209596 , 3.51388889, 4.44318182],\n",
              "       [4.78451178, 2.86784512, 4.66961279, 3.46254209, 4.39183502],\n",
              "       [4.60984848, 2.69318182, 4.49494949, 3.28787879, 4.21717172]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JFBWtxYJFP4P",
        "outputId": "79293f26-4de8-4f6e-e4e4-b0035fa46e4f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "source": [
        "for i in range(len(nan_set)):\n",
        "  r_hat[nan_set[i]] = np.nan\n",
        "print(\"Rating matrix (exclude not measured values)\")\n",
        "r_hat"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Rating matrix (exclude not measured values)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[5.01052189, 3.09385522, 4.8956229 ,        nan, 4.61784512],\n",
              "       [       nan, 2.89141414, 4.69318182, 3.48611111, 4.41540404],\n",
              "       [4.10311448, 2.18644781,        nan, 2.78114478, 3.71043771],\n",
              "       [       nan, 0.69318182, 2.49494949, 1.28787879, 2.21717172],\n",
              "       [4.90488215,        nan, 4.78998316, 3.58291246, 4.51220539],\n",
              "       [4.87710438, 2.96043771,        nan, 3.55513468, 4.48442761],\n",
              "       [3.1456229 , 1.22895623, 3.03072391, 1.8236532 ,        nan],\n",
              "       [4.83585859, 2.91919192, 4.7209596 ,        nan, 4.44318182],\n",
              "       [4.78451178, 2.86784512, 4.66961279, 3.46254209,        nan],\n",
              "       [4.60984848,        nan, 4.49494949, 3.28787879, 4.21717172]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jtsmMr-UFYpU",
        "outputId": "da170aad-2f68-4b60-fa8c-93dbd16b4881",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "source": [
        "# Baseline Prediction\n",
        "r_error = r_train - r_hat\n",
        "print(\"Prediction\")\n",
        "r_error"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Prediction\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-0.01052189,  0.90614478, -0.8956229 ,         nan,         nan],\n",
              "       [        nan,  0.10858586,  0.30681818,         nan, -0.41540404],\n",
              "       [ 0.89688552, -0.18644781,         nan,         nan, -0.71043771],\n",
              "       [        nan,         nan,  0.50505051, -0.28787879, -0.21717172],\n",
              "       [-0.90488215,         nan,         nan,  0.41708754,  0.48779461],\n",
              "       [        nan,  0.03956229,         nan, -0.55513468,  0.51557239],\n",
              "       [-0.1456229 ,         nan, -0.03072391,  0.1763468 ,         nan],\n",
              "       [ 0.16414141,         nan, -0.7209596 ,         nan,  0.55681818],\n",
              "       [        nan, -0.86784512,  0.33038721,  0.53745791,         nan],\n",
              "       [        nan,         nan,  0.50505051, -0.28787879, -0.21717172]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sCL9b3BaLEAv"
      },
      "source": [
        "# #HW2"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ef5e-dPHJ9V_"
      },
      "source": [
        "# similarity\n",
        "\n",
        "sim = np.empty((5,5))\n",
        "movie_list = [0,1,2,3,4]\n",
        "for i in movie_list:\n",
        "  for j in movie_list:\n",
        "    if i == j:\n",
        "      sim[i,j] = np.nan\n",
        "    else:\n",
        "      X = r_error[:,[i,j]]\n",
        "      X = X[~np.isnan(X).any(axis=1)] # 둘 다 유저 평점이 있는 movie set 추출하기 \n",
        "      # print(X)\n",
        "      di, dj = X[:,0], X[:,1]\n",
        "      # print(di, dj)\n",
        "      numer = np.dot(di,dj)\n",
        "      denom_1, denom_2 =  np.sum(di**2), np.sum(dj**2)\n",
        "      denom = math.sqrt(denom_1*denom_2)\n",
        "      dij = numer/denom\n",
        "      sim[i,j] = dij\n",
        "      # print(numer, denom_1, denom_2, dij)\n",
        "      # print(\"\\n\")\n",
        "\n"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GzA6dnHlLpGA",
        "outputId": "b2ff1600-54d4-4dcf-bc8a-761ff62b9300",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        }
      },
      "source": [
        "sim"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[        nan, -0.21301359, -0.41335723, -0.97123137, -0.74899568],\n",
              "       [-0.21301359,         nan, -0.84334288, -0.72757202,  0.505802  ],\n",
              "       [-0.41335723, -0.84334288,         nan, -0.21614403, -0.92916674],\n",
              "       [-0.97123137, -0.72757202, -0.21614403,         nan,  0.06791977],\n",
              "       [-0.74899568,  0.505802  , -0.92916674,  0.06791977,         nan]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UpRh-kTzmIaQ"
      },
      "source": [
        "# #HW3"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PZeYetM0OwzT"
      },
      "source": [
        "#  \\hat{R}^N 구하기\n",
        "# 1. matrix user i, movie j cell 을 돌 때, j movie와 가장 similar한 movie 순서대로 index 정렬하기\n",
        "# 2. weight 구하기\n",
        "# 3. NB-r_hat 구하기\n",
        "# 6. RMSE (baseline) 구하기\n",
        "# 6. RMSE (NBH pred) 구하기"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "76ZG2fHgrp6P",
        "outputId": "3aade76f-7a93-4359-b562-b3057068374c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        }
      },
      "source": [
        "print(sim)"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[        nan -0.21301359 -0.41335723 -0.97123137 -0.74899568]\n",
            " [-0.21301359         nan -0.84334288 -0.72757202  0.505802  ]\n",
            " [-0.41335723 -0.84334288         nan -0.21614403 -0.92916674]\n",
            " [-0.97123137 -0.72757202 -0.21614403         nan  0.06791977]\n",
            " [-0.74899568  0.505802   -0.92916674  0.06791977         nan]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zNg7ADBAveS-",
        "outputId": "1294bc26-48d1-4c39-b71a-7a28d5969517",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        }
      },
      "source": [
        "r_error"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-0.01052189,  0.90614478, -0.8956229 ,         nan,         nan],\n",
              "       [        nan,  0.10858586,  0.30681818,         nan, -0.41540404],\n",
              "       [ 0.89688552, -0.18644781,         nan,         nan, -0.71043771],\n",
              "       [        nan,         nan,  0.50505051, -0.28787879, -0.21717172],\n",
              "       [-0.90488215,         nan,         nan,  0.41708754,  0.48779461],\n",
              "       [        nan,  0.03956229,         nan, -0.55513468,  0.51557239],\n",
              "       [-0.1456229 ,         nan, -0.03072391,  0.1763468 ,         nan],\n",
              "       [ 0.16414141,         nan, -0.7209596 ,         nan,  0.55681818],\n",
              "       [        nan, -0.86784512,  0.33038721,  0.53745791,         nan],\n",
              "       [        nan,         nan,  0.50505051, -0.28787879, -0.21717172]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "djG21qcCoNNj",
        "outputId": "fe8f5b28-a74c-40df-8e86-3882df0f882a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 646
        }
      },
      "source": [
        "# neighborhood predictor \n",
        "r_neighbor = np.empty((10,5))\n",
        "for i in range(r.shape[0]):\n",
        "  u = r_error[i,:]\n",
        "  nan_mov = np.argwhere(np.isnan(u)).T[0] # user i가 평가하지 않은 movie 들의 index\n",
        "  for j in range(r.shape[1]):\n",
        "    d = sim[:,j] # similarity matrix에서 movie j에 대한 행 찾기\n",
        "    \n",
        "    # 1. similar한 순서대로 index 찾기\n",
        "    ind = np.argsort(-(abs(d)))[:5] \n",
        "    for mov in nan_mov:\n",
        "      ind = np.delete(ind, np.where(ind == mov), 0) # ind 로부터 user i 가 평가하지 않은 movie에 대한 값을 삭제\n",
        "    \n",
        "    # 2. weight 구하기\n",
        "    m, n = ind[0], ind[1]\n",
        "    d_arr = np.array([d[m], d[n]])\n",
        "    e_arr = np.array([u[m], u[n]])\n",
        "    weight = sum(d_arr*e_arr)/np.sum(abs(d_arr))\n",
        "    \n",
        "    # 3. NB r_hat 에 집어넣기\n",
        "    r_neighbor[i,j] = r_hat[i,j] + weight\n",
        "    \n",
        "    # print(d_arr, e_arr)\n",
        "    # print(i, j, \" : \", r_hat[i,j],\" + \",  weight,\" = \", r_neighbor[i,j], \"\\n\")\n",
        "\n",
        "print(\"\\n\")\n",
        "print(\"Real value: \\n\",r, \"\\n\")\n",
        "print(\"Baseline Prediction: \\n\",r_hat, \"\\n\")\n",
        "print(\"Prediction with Neighborhood predictor: \\n\", r_neighbor)\n",
        "\n",
        "# for i in range(len(nan_set)):\n",
        "#   r_neighbor[nan_set[i]] = np.nan\n",
        "# print(\"NBH predictor Rating matrix (exclude not measured values)\")\n",
        "# r_neighbor"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "Real value: \n",
            " [[ 5.  4.  4. nan  5.]\n",
            " [nan  3.  5.  3.  4.]\n",
            " [ 5.  2. nan  2.  3.]\n",
            " [nan  2.  3.  1.  2.]\n",
            " [ 4. nan  5.  4.  5.]\n",
            " [ 5.  3. nan  3.  5.]\n",
            " [ 3.  2.  3.  2. nan]\n",
            " [ 5.  3.  4. nan  5.]\n",
            " [ 4.  2.  5.  4. nan]\n",
            " [ 5. nan  5.  3.  4.]] \n",
            "\n",
            "Baseline Prediction: \n",
            " [[5.01052189 3.09385522 4.8956229         nan 4.61784512]\n",
            " [       nan 2.89141414 4.69318182 3.48611111 4.41540404]\n",
            " [4.10311448 2.18644781        nan 2.78114478 3.71043771]\n",
            " [       nan 0.69318182 2.49494949 1.28787879 2.21717172]\n",
            " [4.90488215        nan 4.78998316 3.58291246 4.51220539]\n",
            " [4.87710438 2.96043771        nan 3.55513468 4.48442761]\n",
            " [3.1456229  1.22895623 3.03072391 1.8236532         nan]\n",
            " [4.83585859 2.91919192 4.7209596         nan 4.44318182]\n",
            " [4.78451178 2.86784512 4.66961279 3.46254209        nan]\n",
            " [4.60984848        nan 4.49494949 3.28787879 4.21717172]] \n",
            "\n",
            "Prediction with Neighborhood predictor: \n",
            " [[5.2934071  3.81099807 4.29099062        nan 5.11843066]\n",
            " [       nan 2.54388651 4.85927655 3.33212311 4.2550087 ]\n",
            " [4.69752735 1.42075821        nan 2.34823468 3.0999257 ]\n",
            " [       nan 0.55537792 2.72546511 0.85166022 1.72691457]\n",
            " [4.45700839        nan 4.73098761 4.46053343 5.37653145]\n",
            " [4.96604771 3.49934805        nan 3.56297026 4.45358699]\n",
            " [3.0310953  1.16377497 3.06579607 1.94836044        nan]\n",
            " [4.73344516 3.57861398 4.28504487        nan 4.76910407]\n",
            " [4.30887308 2.44155275 5.25076456 4.05595004        nan]\n",
            " [4.86694105        nan 4.72546511 2.85166022 3.72691457]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nR1nPwVz_x73",
        "outputId": "e9ffc1f4-c2f5-4101-aa26-a9537935d7af",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "# RMSE for Baseline\n",
        "r_pred_train = r_train - r_hat\n",
        "num_elements = np.count_nonzero(~np.isnan(r_pred_train))\n",
        "rmse_train = math.sqrt(np.nansum(r_pred_train**2)/num_elements)\n",
        "\n",
        "r_pred_test = r - r_hat\n",
        "rmse_test = 0\n",
        "num_pairs = len(test_set)\n",
        "for i in range(num_pairs):\n",
        "  r_err_tmp = r_pred_test[test_set[i]]\n",
        "  rmse_test += pow(r_err_tmp,2)\n",
        "rmse_test = math.sqrt(rmse_test/num_pairs)\n",
        "\n",
        "print(\"RMSE baseline train data:\", rmse_train)\n",
        "print(\"RMSE baseline test data:\", rmse_test)"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "RMSE baseline train data: 0.5126212867350681\n",
            "RMSE baseline test data: 0.642513275229418\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bmms_7Vx_x77",
        "outputId": "ed2a3187-152f-473d-a6db-67bf6da303c9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "# RMSE for Prediction 2 (add neighborhood predictor)\n",
        "r_nb_pred_test = r - r_neighbor\n",
        "\n",
        "# RMSE for Prediction 1\n",
        "r_pred_train = r_train- r_neighbor\n",
        "num_elements = np.count_nonzero(~np.isnan(r_pred_train))\n",
        "rmse_train = math.sqrt(np.nansum(r_pred_train**2)/num_elements)\n",
        "\n",
        "r_pred_test = r - r_neighbor\n",
        "rmse = 0\n",
        "num_pairs = len(test_set)\n",
        "for i in range(num_pairs):\n",
        "  r_err_tmp = r_nb_pred_test[test_set[i]]\n",
        "  rmse += pow(r_err_tmp,2)\n",
        "rmse_test = math.sqrt(rmse/num_pairs)\n",
        "\n",
        "print(\"RMSE neighborhood predictor train data:\", rmse_train)\n",
        "print(\"RMSE neighborhood predictor test data:\", rmse_test)\n"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "RMSE neighborhood predictor train data: 0.3256985834994247\n",
            "RMSE neighborhood predictor test data: 0.5960894271891236\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ap_MsHamQXWm"
      },
      "source": [
        ""
      ],
      "execution_count": 19,
      "outputs": []
    }
  ]
}